
#+property: header-args
#+startup: content

* ~early-init.el~

**  Find gcc and libgccjit packages to be used for emacs on macOS

#+begin_src emacs-lisp :tangle "early-init.el" :mkdirp yes
(defun homebrew-gcc-paths ()
  "Return GCC library paths from Homebrew installations.
Detects paths for gcc and libgccjit packages to be used in LIBRARY_PATH."
  (let* ((paths '())
         (brew-bin (or (executable-find "brew")
                       (let ((arm-path "/opt/homebrew/bin/brew")
                             (intel-path "/usr/local/bin/brew"))
                         (cond
                          ((file-exists-p arm-path) arm-path)
                          ((file-exists-p intel-path) intel-path))))))

    (when brew-bin
      ;; Get gcc paths.
      (let* ((gcc-prefix (string-trim
                          (shell-command-to-string
                           (concat brew-bin " --prefix gcc"))))
             (gcc-lib-current (expand-file-name "lib/gcc/current" gcc-prefix)))
        (push gcc-lib-current paths)

        ;; Find apple-darwin directory.
        (let* ((default-directory gcc-lib-current)
               (arch-dirs (file-expand-wildcards "gcc/*-apple-darwin*/*[0-9]")))
          (when arch-dirs
            (push (expand-file-name
                   (car (sort arch-dirs #'string>)))
                  paths))))

      ;; Get libgccjit paths
      (let* ((jit-prefix (string-trim
                          (shell-command-to-string
                           (concat brew-bin " --prefix libgccjit"))))
             (jit-lib-current (expand-file-name "lib/gcc/current" jit-prefix)))
        (push jit-lib-current paths)))

    (nreverse paths)))

(defun setup-macos-native-comp-library-paths ()
  "Set up LIBRARY_PATH for native compilation on macOS.
Includes Homebrew GCC paths and CommandLineTools SDK libraries."
  (let* ((existing-paths (split-string (or (getenv "LIBRARY_PATH") "") ":" t))
         (gcc-paths (homebrew-gcc-paths))
         (clt-paths '("/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"))
         (unique-paths (delete-dups
                        (append existing-paths gcc-paths clt-paths))))

    (setenv "LIBRARY_PATH" (mapconcat #'identity unique-paths ":"))))

;; Set up library paths for native compilation on macOS.
(when (eq system-type 'darwin)
  (setup-macos-native-comp-library-paths))
#+end_src

* ~init.el~

**  Initialize package repositories

#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src

**  Basic emacs configuration

*** Start emacs maximized

#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+end_src

*** Set font depending on OS

#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (set-face-attribute 'default nil
    	               :family "Iosevka Nerd Font Mono"
    	               :weight 'regular))
    ('darwin (set-face-attribute 'default nil :family "IosevkaTerm Nerd Font Mono" :weight 'regular)))
#+end_src

*** Disable unneeded features
- These settings are very commonly used to turn emacs into a more suitable editor for programmers
  
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (setq ring-bell-function #'ignore)
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

*** Enable buffer line numbers
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (global-display-line-numbers-mode 1)
  (hl-line-mode 1)
#+end_src

*** Enable history settings
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (recentf-mode 1)
  (setq history-length 25)
  (savehist-mode 1)
  (save-place-mode 1)
#+end_src

*** Notice and show changes made to files outside emacs 
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

*** Disable cursors in the minibuffer prompt
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

*** Allow the use of mini buffer commands inside a mini buffer
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)  
#+end_src

*** Set custom-file to random file
- This file will be the repository for customizations emacs /would/ have written in ~init.el~ whenever ~M-x customize~ related commands are executed
- Can even be turned into temporary file, might do that so they never persist

#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  ;; Disable the damn thing by making it disposable. 
  ;; (setq custom-file (make-temp-file "emacs-custom-"))
#+end_src

*** Create ~hyper~ modifier functionality
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper)

  ;;(defconst my-leader (if (eq system-type 'darwin) "SPC" "SPC"))
  (defun enable-hyper-super-modifiers-linux-x ()
    ;; on nowadays linux, <windows> key is usually configured to Super

    ;; menu key as hyper (Note: for H-s, you need to release <menu> key before pressing 's')
    (define-key key-translation-map [menu] 'event-apply-hyper-modifier) ;H-
    ;;(define-key key-translation-map [apps] 'event-apply-hyper-modifier)

    ;; by default, Emacs bind <menu> to execute-extended-command (same as M-x) now <menu> defined as 'hyper, we need to press <menu> twice to get <H-menu> (global-set-key (kbd "<H-menu>") 'execute-extended-command)
    )

  (enable-hyper-super-modifiers-linux-x)
#+end_src

*** Vertico prompt indicator
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  ;; Vertico settings
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
#+end_src

*** Load modules
#+begin_src emacs-lisp :tangle "init.el" :mkdirp yes
  (mapc
   (lambda (string)
     (add-to-list 'load-path (locate-user-emacs-file string)))
   '("tony-lisp" "tony-emacs-modules"))

  (require 'tony-emacs-org)
  (require 'tony-emacs-project)
  (require 'tony-emacs-meow)
  (require 'tony-emacs-which-key)
  (require 'tony-emacs-doom-themes)
  (require 'tony-emacs-solaire-mode)
  (require 'tony-emacs-doom-modeline)
  (require 'tony-emacs-textsize)
  (require 'tony-emacs-vertico)
  (require 'tony-emacs-marginalia)
  (require 'tony-emacs-orderless)
  (require 'tony-emacs-consult)
  (require 'tony-emacs-magit)
  (require 'tony-emacs-denote)
  ;;(require 'tony-emacs-treesit)

#+end_src

* Modules

** ~org.el~

*** org mode setup
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-org.el" :mkdirp yes
  (use-package org
    :ensure nil
    :init
    (setq org-directory (expand-file-name "~/Documents/org/"))
    (setq org-imenu-depth 7)
    :config
    (setq org-startup-indented t)
    )
#+end_src

*** org agenda set up
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-org.el" :mkdirp yes
  (use-package org-agenda
    :ensure nil
    :config
    (setq org-agenda-files (list org-directory)))
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-org.el" :mkdirp yes
  (provide 'tony-emacs-org)
#+end_src

** ~project.el~
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-project.el" :mkdirp yes
  (use-package project
    :ensure nil)
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-project.el" :mkdirp yes
  (provide 'tony-emacs-project)
#+end_src

** ~meow.el~
*** setup meow config
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-meow.el" :mkdirp yes
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
#+end_src

*** start up meow package
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-meow.el" :mkdirp yes
  (use-package meow
    :ensure t
    :config
    (meow-setup)
    (meow-global-mode 1)
    )
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-meow.el" :mkdirp yes
  (provide 'tony-emacs-meow)
#+end_src

** ~which-key.el~

*** setup which key
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-which-key.el" :mkdirp yes
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-which-key.el" :mkdirp yes
  (provide 'tony-emacs-which-key)
#+end_src

** ~doom-themes.el~

*** use and config doom themes
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-doom-themes.el" :mkdirp yes
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-doom-themes.el" :mkdirp yes
  (provide 'tony-emacs-doom-themes)
#+end_src

** ~solaire-mode.el~

*** use and config solaire mode
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-solaire-mode.el" :mkdirp yes
  (use-package solaire-mode
    :ensure t
    :config
    (solaire-global-mode +1))
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-solaire-mode.el"
  (provide 'tony-emacs-solaire-mode)
#+end_src

** ~doom-modeline.el~

*** use and config doom modeline
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-doom-modeline.el" :mkdirp yes
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-doom-modeline.el" :mkdirp yes
  (provide 'tony-emacs-doom-modeline)
#+end_src

** ~textsize.el~

*** use and config textsize
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-textsize.el" :mkdirp yes
  (use-package textsize
    :ensure t
    :init (textsize-mode)
    ;; Can set macOS specific font size if necessary
    :custom (textsize-default-points (if (eq system-type 'darwin) 15 15))
    :config (textsize-fix-frame)
    (customize-set-variable 'textsize-monitor-size-thresholds
  			  '((0 . -3) (340 . 0) (600 . -1)(900 . 6)(1200 . 9)))
    (customize-set-variable 'textsize-pixel-pitch-thresholds
                            '((0 . 15) (.08 . 15) (0.11 . 0))))
#+end_src

*** textsize-metrics creation
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-textsize.el" :mkdirp yes
  ;; stole this from jmccarrell
  (defun tb/dump-frame-textsize-metrics ()
    "Dump selected frame metrics from the currently selected frame to the *Message* buffer.
  Intended to be helpful for debugging the choices textsize makes for a given monitor/display."
    (interactive)
    (let (f (selected-frame))
      (message "emacs frame geometry: X Y WIDTH HEIGHT: %s" (frame-monitor-attribute 'geometry f))
      (message "emacs monitor size WIDTH HEIGHT mm: %s" (frame-monitor-attribute 'mm-size f))
      (message "textsize monitor size  mm: %d" (textsize--monitor-size-mm f))
      (message "textsize monitor size pix: %d" (textsize--monitor-size-px f))
      (message "pixel pitch %.02f" (textsize--pixel-pitch f))
      (message "textsize default points %d" textsize-default-points)
      (message "textsize frame offset %d"
               (or (frame-parameter f 'textsize-manual-adjustment) 0))
      (message "pixel pitch adjustment %d"
               (textsize--threshold-offset textsize-pixel-pitch-thresholds
                                           (textsize--pixel-pitch f)))
      (message "monitor size adjustment %d"
               (textsize--threshold-offset textsize-monitor-size-thresholds
                                           (textsize--monitor-size-mm f)))
      (message "text size chosen: %d" (textsize--point-size f))
      (message "default-font: WIDTHxHEIGHT %dx%d" (default-font-width)(default-font-height))
      (message "resultant text area in chars WIDTHxHEIGHT %dx%d"
               (frame-width f)(frame-height f))
      (message "default face font %s" (face-attribute 'default :font))
      )
    nil)
#+end_src

#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-textsize.el" :mkdirp yes
  (provide 'tony-emacs-textsize)
#+end_src

** ~vertico.el~

*** use vertico and config
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-vertico.el" :mkdirp yes
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :bind (:map vertico-map
  	      ("C-j" . vertico-next)
  	      ("C-k" . vertico-previous))

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-vertico.el" :mkdirp yes
  (provide 'tony-emacs-vertico)
#+end_src

** ~marginalia.el~
*** use and config marginalia
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-marginalia.el" :mkdirp yes
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src
*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-marginalia.el" :mkdirp yes
  (provide 'tony-emacs-marginalia)
#+end_src

** ~orderless.el~
*** use and config orderless
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-orderless.el" :mkdirp yes
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src#+end_src
*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-orderless.el" :mkdirp yes
  (provide 'tony-emacs-orderless)
#+end_src

** ~consult.el~
*** use and config consult
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-consult.el" :mkdirp yes
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
  	 ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-consult.el" :mkdirp yes
  (provide 'tony-emacs-consult)
#+end_src

** ~embark.el~
*** use and config embark
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-embark.el" :mkdirp yes
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src
*** use and config embark-consult
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-embark.el" :mkdirp yes
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-embark.el" :mkdirp yes
  (provide 'tony-emacs-embark)
#+end_src

** ~magit.el~
*** use and config magit
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-magit.el" :mkdirp yes
  (use-package magit
    :ensure t)
#+end_src
*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-magit.el" :mkdirp yes
  (provide 'tony-emacs-magit)
#+end_src

** ~denote.el~
*** use and config denote
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-denote.el" :mkdirp yes
  (use-package denote
    :ensure t
    :config
    (setq denote-directory (expand-file-name "~/Documents/org/denote"))
    (setq denote-known-keywords '("emacs" "org mode" "denote" "game dev" "godot" "C" "lisp" "typescript" "javascript" "angular" "ngrx" "hand tools" "power tools" "offroading" "preparedness"))
    )
#+end_src
*** provide module
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-denote.el" :mkdirp yes
  (provide 'tony-emacs-denote)
#+end_src

** ~treesit.el~

*** use and config treesit
#+begin_src emacs-lisp :tangle "tony-emacs-modules/tony-emacs-treesit.el" :mkdirp yes
    (use-package treesit
        :mode (
               ("\\.html\\'"  . html-ts-mode)
               ("\\.component.html\\'"  . ngxhtml-ts-mode)
               ("\\.js\\'"  . typescript-ts-mode)
               ("\\.mjs\\'" . typescript-ts-mode)
               ("\\.mts\\'" . typescript-ts-mode)
               ("\\.cjs\\'" . typescript-ts-mode)
               ("\\.ts\\'"  . typescript-ts-mode)
               ("\\.jsx\\'" . tsx-ts-mode)
               ("\\.json\\'" .  json-ts-mode)
               ("\\.Dockerfile\\'" . dockerfile-ts-mode)
               ("\\.prisma\\'" . prisma-ts-mode)
               ("\\.yaml\\'" . yaml-ts-mode)
               ;; More modes defined here...
               )
        :preface
        (defun tb/setup-install-grammars ()
          "Install Tree-sitter grammars if they are absent."
          (interactive)
          (dolist (grammar
                   '((css . ("https://github.com/tree-sitter/tree-sitter-css"))
                     (bash "https://github.com/tree-sitter/tree-sitter-bash")
                     (html  "https://github.com/tree-sitter/tree-sitter-html")
                     (angular  "https://github.com/dlvandenberg/tree-sitter-angular")
                     (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
                     (json . ("https://github.com/tree-sitter/tree-sitter-json"))
                     (python . ("https://github.com/tree-sitter/tree-sitter-python"))
                     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
                     (make "https://github.com/alemuller/tree-sitter-make")
                     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
                     (cmake "https://github.com/uyha/tree-sitter-cmake")
                     (c "https://github.com/tree-sitter/tree-sitter-c")
  		   (gdscript "https://github.com/PrestonKnopp/tree-sitter-gdscript")
                     (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
                     (toml "https://github.com/tree-sitter/tree-sitter-toml")
                     (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" ))
                     (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
                     (prisma "https://github.com/victorhqc/tree-sitter-prisma")))
            (add-to-list 'treesit-language-source-alist grammar)
            ;; Only install `grammar' if we don't already have it
            ;; installed. However, if you want to *update* a grammar then
            ;; this obviously prevents that from happening.
            (unless (treesit-language-available-p (car grammar))
              (treesit-install-language-grammar (car grammar)))))

        ;; Optional, but recommended. Tree-sitter enabled major modes are
        ;; distinct from their ordinary counterparts.
        ;;
        ;; You can remap major modes with `major-mode-remap-alist'. Note
        ;; that this does *not* extend to hooks! Make sure you migrate them
        ;; also
        (dolist (mapping
                 '((python-mode . python-ts-mode)
                   (css-mode . css-ts-mode)
                   (typescript-mode . typescript-ts-mode)
                   (js-mode . typescript-ts-mode)
                   (js2-mode . typescript-ts-mode)
                   (c-mode . c-ts-mode)
                   (c++-mode . c++-ts-mode)
                   (c-or-c++-mode . c-or-c++-ts-mode)
                   (bash-mode . bash-ts-mode)
                   (css-mode . css-ts-mode)
                   (json-mode . json-ts-mode)
                   (js-json-mode . json-ts-mode)
                   (sh-mode . bash-ts-mode)
                   (sh-base-mode . bash-ts-mode)))
          (add-to-list 'major-mode-remap-alist mapping))
        :config
        (tb/setup-install-grammars)
  )

#+end_src


